// <auto-generated />
using System;
using ManagmentSystem.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagmentSystem.EF.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250214233235_editcolumn")]
    partial class editcolumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("ManagmentSystem.Core.Models.AccessListPrivilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<float>("Code")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("UserPositionId")
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserPositionId")
                        .IsUnique();

                    b.ToTable("AccessListPrivileges");

                    b.HasData(
                        new
                        {
                            Id = "3a8e9723-4070-4be5-92d1-f027d4993810",
                            Code = 1f,
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserPositionId = "9e7e9687-8cb3-48fe-8912-40fc6ecb5b90"
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.CategoryProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CategoryProductes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customeres");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DepCode")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DepartmentParentId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<int>("DepartmentType")
                        .HasColumnType("int");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Code")
                        .IsUnique();

                    b.ToTable("Departmentes");

                    b.HasData(
                        new
                        {
                            Id = "de3eb995-b4bd-42a5-8bab-a3923e386794",
                            AName = "الإدارة العامة",
                            Code = "GD",
                            DepCode = "0001",
                            DepartmentParentId = "",
                            DepartmentType = 1,
                            EName = "General department",
                            IsActive = 1ul,
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.ImageFolder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("ProductId")
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ImageFolderes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("DateTime");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("ProcessType")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("SpecialDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostWithoutDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit");

                    b.Property<ulong>("IsLeader")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Positiones");

                    b.HasData(
                        new
                        {
                            Id = "d2af2201-10d1-4568-9237-454ac8a5adb0",
                            AName = "المدير العام",
                            DepartmentId = "de3eb995-b4bd-42a5-8bab-a3923e386794",
                            EName = "Manager General",
                            IsActive = 1ul,
                            IsLeader = 1ul,
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Privilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("ADescription")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("AName")
                        .HasColumnType("varchar(200)");

                    b.Property<float>("Code")
                        .HasColumnType("float");

                    b.Property<string>("EDescription")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("EName")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            Id = "8d9ae229-15c5-4d44-a520-e4deddb34a19",
                            ADescription = "مدير النظام",
                            AName = "مدير النظام",
                            Code = 1f,
                            EDescription = "System manager",
                            EName = "SystemManager",
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Process", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("DateTime");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(4000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProcessType")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProducerId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("ProductId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Producer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Produceres");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<ulong>("IsDiscount")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<float>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<ulong>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Productes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "b4df9438-6a18-4d83-a331-3aac6c9b61db",
                            AName = "دور مدير النظام",
                            EName = "Role system manager",
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.RolePrivilege", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("PrivilegeId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.HasKey("RoleId", "PrivilegeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PrivilegeId");

                    b.ToTable("RolePrivileges");

                    b.HasData(
                        new
                        {
                            RoleId = "b4df9438-6a18-4d83-a331-3aac6c9b61db",
                            PrivilegeId = "8d9ae229-15c5-4d44-a520-e4deddb34a19",
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = "69a28de0-17b0-4bc1-ae91-aa3dfae4d09e",
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.SessionInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("DateTime");

                    b.Property<ulong>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("SessionId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("AFirstName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ALastName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("BlockedType")
                        .HasColumnType("int");

                    b.Property<string>("EFirstName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ELastName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<ulong>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(0ul);

                    b.Property<ulong>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id", "UserName", "Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "26ef1664-6200-4061-adf0-4ba778e793d9",
                            AFirstName = "مدير",
                            ALastName = "النظام",
                            BlockedType = 0,
                            EFirstName = "System",
                            ELastName = "Manager",
                            Email = "nawras4mstarehe@gmail.com",
                            IsAdmin = 1ul,
                            IsBlocked = 0ul,
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEB5C0f70dV/4eXQneJC5mFfueNv8dBRlLNNgxHwws4QRvB0ITIXJdvpJt+Ibcw2oig==",
                            PhoneNumber = "0953244518",
                            UserName = "admin",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserPosition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DateTime");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPositions");

                    b.HasData(
                        new
                        {
                            Id = "9e7e9687-8cb3-48fe-8912-40fc6ecb5b90",
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2026, 2, 15, 2, 32, 33, 468, DateTimeKind.Local).AddTicks(7046),
                            IsActive = 1ul,
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PositionId = "d2af2201-10d1-4568-9237-454ac8a5adb0",
                            StartDate = new DateTime(2025, 2, 15, 2, 32, 33, 461, DateTimeKind.Local).AddTicks(6700),
                            Type = 1,
                            UserId = "26ef1664-6200-4061-adf0-4ba778e793d9",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserPositionRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<string>("RoleId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserPositionId")
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserPositionId");

                    b.ToTable("UserPositionRoles");

                    b.HasData(
                        new
                        {
                            Id = "71d6caeb-8f49-4c99-96fa-e1b6484bd00d",
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastAccessed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "b4df9438-6a18-4d83-a331-3aac6c9b61db",
                            UserPositionId = "9e7e9687-8cb3-48fe-8912-40fc6ecb5b90"
                        });
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<DateTime>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DateTime");

                    b.Property<int>("Theme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("RoleUserPosition", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("UserPositionesId")
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("RolesId", "UserPositionesId");

                    b.HasIndex("UserPositionesId");

                    b.ToTable("RoleUserPosition");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.AccessListPrivilege", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.UserPosition", "UserPosition")
                        .WithOne("AccessListPrivilege")
                        .HasForeignKey("ManagmentSystem.Core.Models.AccessListPrivilege", "UserPositionId");

                    b.Navigation("UserPosition");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.CategoryProduct", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Category", "Category")
                        .WithMany("CategoriesProductes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentSystem.Core.Models.Product", "Product")
                        .WithMany("CategoriesProductes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Customer", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("ManagmentSystem.Core.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.ImageFolder", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Category", "Category")
                        .WithMany("ImageFolders")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ManagmentSystem.Core.Models.Product", "Product")
                        .WithMany("ImageFolders")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Position", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Process", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Customer", "Customer")
                        .WithMany("Processes")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ManagmentSystem.Core.Models.Invoice", "Invoice")
                        .WithMany("Processes")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ManagmentSystem.Core.Models.Producer", "Producer")
                        .WithMany("Processes")
                        .HasForeignKey("ProducerId");

                    b.HasOne("ManagmentSystem.Core.Models.Product", "Product")
                        .WithMany("Processes")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Producer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Producer", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.User", "User")
                        .WithOne("Producer")
                        .HasForeignKey("ManagmentSystem.Core.Models.Producer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.RolePrivilege", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Privilege", "Privilege")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentSystem.Core.Models.Role", "Role")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Privilege");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserPosition", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Position", "Position")
                        .WithMany("UserPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentSystem.Core.Models.User", "User")
                        .WithMany("UserPositions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserPositionRole", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Role", "Role")
                        .WithMany("UserPositionRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("ManagmentSystem.Core.Models.UserPosition", "UserPosition")
                        .WithMany("UserPositionRoles")
                        .HasForeignKey("UserPositionId");

                    b.Navigation("Role");

                    b.Navigation("UserPosition");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserProfile", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("ManagmentSystem.Core.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUserPosition", b =>
                {
                    b.HasOne("ManagmentSystem.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentSystem.Core.Models.UserPosition", null)
                        .WithMany()
                        .HasForeignKey("UserPositionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Category", b =>
                {
                    b.Navigation("CategoriesProductes");

                    b.Navigation("ImageFolders");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Customer", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Invoice", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Position", b =>
                {
                    b.Navigation("UserPositions");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Privilege", b =>
                {
                    b.Navigation("RolePrivileges");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Producer", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Product", b =>
                {
                    b.Navigation("CategoriesProductes");

                    b.Navigation("ImageFolders");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.Role", b =>
                {
                    b.Navigation("RolePrivileges");

                    b.Navigation("UserPositionRoles");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Producer");

                    b.Navigation("UserPositions");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ManagmentSystem.Core.Models.UserPosition", b =>
                {
                    b.Navigation("AccessListPrivilege");

                    b.Navigation("UserPositionRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
